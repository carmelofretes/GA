#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
NSGA II IMPLEMENTATION 
\end_layout

\begin_layout Standard
Our algorithm, which is an extension of the algorithm MOEA presented in
 [10], begins with the creation of the initial population.
 This MOEA is called Non-dominated Sorting Genetic Algorithm II, NSGAII.
 The best solutions are found over several generations.
 Operators such as crossing and mutation explore other possible solutions.
 In this implementation, the objective is to find the route and the set
 of FS for each request, such that the total distance traveled, the maximum
 FS used and the total cost are minimized; all this complying with the respectiv
e RSA restrictions.
 The implementation of the NSGAII is described below in Algorithm 1.
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\series bold
NSGA II
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
INPUT:
\series default
 Route table P; Total amount of FS; List of demands; Size of the population;
 Probability of mutation; Stop Criterion; FS Assignment Algorithm; Total
 Distance, Maximum FS, Maximum Cost 
\end_layout

\begin_layout Plain Layout

\series bold
OUTPUT:
\series default
 ParetoFront 
\end_layout

\begin_layout Plain Layout
1: Initialize Population (P) 
\end_layout

\begin_layout Plain Layout
2: 
\series bold
While 
\series default
the stop criterion is not met 
\end_layout

\begin_layout Plain Layout
3: Q = generate individual (P) by selection, crossing and mutation 
\end_layout

\begin_layout Plain Layout
4: Q = Q âˆª P 
\end_layout

\begin_layout Plain Layout
5: R = Construct the Pareto front from Q based in dominance 
\end_layout

\begin_layout Plain Layout
6: Build Pareto fronts (R) 
\end_layout

\begin_layout Plain Layout
7: Calculate Distance of Crowding (R) 
\end_layout

\begin_layout Plain Layout
8: P = [0] 
\end_layout

\begin_layout Plain Layout
9: 
\series bold
while
\series default
 P < PopulationSize 
\end_layout

\begin_layout Plain Layout
10: Include the solution in population P considering Pareto ranking and
 Crowding Distance 
\end_layout

\begin_layout Plain Layout
11: 
\series bold
End while 
\end_layout

\begin_layout Plain Layout
12:
\series bold
 End while 
\end_layout

\begin_layout Plain Layout
12:
\series bold
 return
\series default
 ParetoFront (P) 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the NSGA II presented in this work, the chromosome represents a set of
 requests attended.
 Basically, the chromosome is a compound vector in which each gene represents
 an attended request.
 Each element of said vector contains: the index of the assigned route (taken
 f
\begin_inset Formula 
\[
\]

\end_inset

rom the table of pre calculated routes), and the index of the assigned FS
 of the request.
 The steps of the algorithm procedure can be described below:
\end_layout

\begin_layout Standard
Initial Population.
 The first step is to initialize the population.
 The NSGA II begins with an initial population of chromosomes, defined as
 explained below.
 The Algorithm deals with the requests in a determined order, which was
 taken from a paper presented in [1].
 At work, the order is defined as follows: orders are ordered from highest
 to lowest, defined by the highest possible cost of said request, the first
 30% of said list is attended in the first place, while the remaining 70%
 is attended at random.
 This order is represented by the positions of the genes in the chromosome
 and is maintained throughout the execution of the algorithm.
 Then, randomly assign the routes and FS to the demands, taking into account
 the previously defined order.
 Each chromosome encodes a valid solution.
 
\end_layout

\begin_layout Standard
Selection of chromosomes for the next generation.
 The NSGA II algorithm shows us that the cycle begins with the selection
 of individuals, in step 3.
 The stochastic universal sampling method is used to select two parents
 to produce new individuals for the next generation [17].
 Universal stochastic sampling is a sampling algorithm that is implemented
 in a single phase.
 Given a set of n individuals and their associated objective values, the
 algorithm accommodates them in a roulette wheel where the size of the cuts
 assigned to each individual is proportional to the target value.
 Then, a second roulette, is marked with and equally spaced markers where
 and is the number of selections that you want to make.
 Finally, the spinner is rotated and an individual is selected for each
 marker.
 Position of the markers indicates the selected individual.
 
\end_layout

\begin_layout Standard
Crossover operator.
 In this work we used the two-point cross operator [17] through which two
 cut points are randomly generated in each player, using the same points
 generated, assigning intercalary each segment generated from the parents
 to each child.
 In algorithm 1 is applied in step 6.
 
\end_layout

\begin_layout Standard
In Figure 3, we can observe the crossing procedure in which the cut points
 generated randomly were 1 and 2, dividing the player into 3 segments.
 The first segment of player 1 is assigned to the first segment of descendant
 1, so the first segment of player 2 is assigned to the first segment of
 descendant 2.
 Then, the second segment of player 1 is assigned to the second descendant,
 while the second segment Player segment 2 is assigned as the second segment
 of the first descendant.
 Then the last segments are interspersed, resulting in both descendants
 shown in figure 4.
 This process is repeated until crossing the entire current population and
 obtaining as a result the generation of a new population.
 Figure 3: Crossing of 2 reproducers
\end_layout

\begin_layout Standard
Mutation.
 This procedure is applied after crossing, in each individual independently,
 in step 7 of algorithm 1.
 For the individual selected, according to the mutation probability obtained,
 a position of the vector is chosen randomly to change the route used in
 said position.
 Selecting a route from those available for said position, you have a higher
 probability of generating a feasible solution.
 
\end_layout

\begin_layout Standard
Pareto dominance.
 In step 4 the union of the two populations 
\begin_inset Formula $Q=Q\,\cup\,P$
\end_inset

 is performed, in step 5 and 6 the population is classified into categories
 (ranking) on the basis of non-dominance.
 Each solution is assigned a fitness value equal to its non-domain range
 (rank 0 is the best).
 Then the newly formed population is classified into categories (rank) according
 to their domain relation, and then, as explained in step 7, calculate the
 Crowding Distance of each individual, and then select the best ones in
 the next cycle that begins in the step 8, select the individuals with the
 best rank and crowding distance to fill the size of the population, as
 seen in steps 9, 10 and 11 of algorithm 1.
 Therefore, the algorithm starts all over again, from the election of breeders,
 until it reaches the stop condition.
 
\end_layout

\begin_layout Standard
Spectrum assignment.
 A spectrum assignment algorithm is applied to each i-th gene consecutively
 in the order pre-established by the indices on the chromosome.
 The algorithm used in this NASGA II is Random Fit, which randomly assigns
 the free FS found that complies with the constraints of the problem.
 Stop criterion.
 A maximum execution time is used as stopping criterion.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename G:/Genetico/LIBRO_TESIS/04.ListaFiguras/03.crossOperator.jpg
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Crossing of 2 reproducers
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
