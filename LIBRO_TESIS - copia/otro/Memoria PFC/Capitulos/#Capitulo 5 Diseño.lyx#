#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass ociamthesis-lyx
\options a4paper,titlepage
\use_default_options false
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_numerical
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Diseño
\end_layout

\begin_layout Standard
A continuación, se establecerá el diseño de la aplicación en dos pasos:
 en primer lugar y con un mayor nivel de abstracción, se procederá al diseño
 de la arquitectura de forma que quede definido el comportamiento global
 del sistema; en segundo lugar, se profundizará en su estructura a través
 de los diagramas de clases en el apartado de diseño de los datos.
\end_layout

\begin_layout Section
Diseño de la arquitectura
\end_layout

\begin_layout Standard
Tal y como se ha especificado en el Capítulo 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Especificación de requisitos"

\end_inset

, la arquitectura escogida es de tipo cliente-servidor.
 La herramienta constará de Bla,bla,bla.
\end_layout

\begin_layout Subsection
Servidor
\end_layout

\begin_layout Standard
Como se puede verse en Bla,bla,bla.
\end_layout

\begin_layout Subsection
Cliente
\end_layout

\begin_layout Standard
El cliente, por su parte, consta de Bla,bla,bla.
\end_layout

\begin_layout Standard
En la Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "Fig Diagrama de secuencia del cliente"

\end_inset

 se describe un diagrama de secuencia con el esbozo de estos pasos.
\end_layout

\begin_layout Section
Diseño de los datos
\end_layout

\begin_layout Standard
Se dividirá entre la aplicación del servidor y la del cliente, definiendo
 los módulos (clases de Java o 
\emph on
Activities
\begin_inset CommandInset citation
LatexCommand citep
key "Activity"

\end_inset


\emph default
 de Android
\begin_inset CommandInset citation
LatexCommand citep
key "android"

\end_inset

) que intervienen y la relación existente entre ellos, tal y como se muestra
 en la Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "Fig Relación entre módulos servidor"

\end_inset

 y en la Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "Fig Relación entre módulos del cliente"

\end_inset

 de la página 
\begin_inset CommandInset ref
LatexCommand pageref
reference "Fig Relación entre módulos del cliente"

\end_inset

.
\begin_inset Newline newline
\end_inset

Las clases son el mecanismo por el que se pueden crear nuevos tipos en Java.
 Son el punto central sobre el que giran la mayoría de los conceptos de
 la Orientación a Objetos.
 Una clase es básicamente una agrupación de datos y de código que actúa
 sobre esos datos, a la que se le da un nombre.
 Una clase contiene: Datos (se denominan Datos Miembro) y Métodos (se denominan
 Métodos Miembro).
 También pueden contener otras clases.
 
\begin_inset Newline newline
\end_inset

Las 
\emph on
Activities
\emph default
 (o Actividades) son el elemento constituyente de Android más común.
 Para implementarlas se utiliza una clase de Java por cada Actividad que
 extiende de la clase base 
\emph on
Activity
\emph default
.
 Cada clase mostrará una interfaz de usuario, compuesta por 
\emph on
Views
\emph default
 (o Vistas)
\begin_inset CommandInset citation
LatexCommand citep
key "PFCEstudioAndroid"

\end_inset

 (véase Apéndice 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Componentes de Android"

\end_inset

 para más información).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename D:/Mis Datos/Universidad/PFC Videovigilancia por Móvil/LyX/Memoria PFC/figures/Diag relacion modulos servidor.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Relación entre módulos del servidor.
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Fig Relación entre módulos servidor"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Módulos del servidor
\end_layout

\begin_layout Standard
Se definen los siguientes módulos (clases de Java) para el servidor, cuyas
 relaciones vienen definidas en la Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "Fig Relación entre módulos servidor"

\end_inset

:
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{ServidorVVD}
\end_layout

\end_inset

 Núcleo del programa.
 Bla,bla,bla.
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{HttpServidor}
\end_layout

\end_inset

 Clase que actúa como un servidor HTTP lanzado en modo 
\emph on
standalone
\emph default
, para Bla,bla,bla.
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{Camara}
\end_layout

\end_inset

 
\emph on
Inteface
\emph default
 que define los Bla,bla,bla.
\end_layout

\begin_layout Subsubsection
Clase 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{servidorVVD}
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Clase servidorVVD"

\end_inset


\end_layout

\begin_layout Standard
Arranca el servidor de HTTP propio en modo 
\emph on
standalone
\emph default
, escuchando las Bla,bla,bla.
\end_layout

\begin_layout Subsubsection*
Constructores
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{ServidorVVD()}
\end_layout

\end_inset

 Inicia el servidor HTTP escuchando en el puerto 8004, que es el puerto
 por defecto.
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{ServidorVVD(port)}
\end_layout

\end_inset

 Arranca el servidor HTTP escuchando en el puerto Bla,bla,bla.
\end_layout

\begin_layout Subsubsection*
Métodos
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{otroMetodo()}
\end_layout

\end_inset

 Método con el que se inicia la aplicación.
 
\end_layout

\begin_layout Subsubsection
Clase 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{masClases()}
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Clase InterfazConsola"

\end_inset


\end_layout

\begin_layout Standard
Bla,bla,bla.
\end_layout

\begin_layout Subsubsection*
Constructores
\end_layout

\begin_layout Standard
Bla,bla,bla.
\end_layout

\begin_layout Subsubsection*
Métodos
\end_layout

\begin_layout Standard
Bla,bla,bla.
\end_layout

\begin_layout Subsection
Módulos del cliente
\end_layout

\begin_layout Standard
Bla,bla,bla.
\end_layout

\end_body
\end_document
